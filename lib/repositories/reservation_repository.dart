import '../core/enums.dart';
import '../models/reservation.dart';

List<Reservation> reservations = [
  Reservation(
    id: '1',
    courtId: '1',
    clubId: '1',
    startTime: DateTime.now(),
    endTime: DateTime.now().add(const Duration(hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '2',
    courtId: '2',
    clubId: '2',
    startTime: DateTime.now(),
    endTime: DateTime.now().add(const Duration(hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '3',
    courtId: '3',
    clubId: '3',
    startTime: DateTime.now(),
    endTime: DateTime.now().add(const Duration(hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '3',
    courtId: '3',
    clubId: '3',
    startTime: DateTime.now().add(const Duration(days: 1)),
    endTime: DateTime.now().add(const Duration(days: 1, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '3',
    courtId: '3',
    clubId: '3',
    startTime: DateTime.now().add(const Duration(days: 1)),
    endTime: DateTime.now().add(const Duration(days: 1, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '1',
    courtId: '1',
    clubId: '1',
    startTime: DateTime.now().add(const Duration(days: 1)),
    endTime: DateTime.now().add(const Duration(days: 1, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '3',
    courtId: '3',
    clubId: '3',
    startTime: DateTime.now().add(const Duration(days: 2)),
    endTime: DateTime.now().add(const Duration(days: 2, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '1',
    courtId: '1',
    clubId: '1',
    startTime: DateTime.now().add(const Duration(days: 2)),
    endTime: DateTime.now().add(const Duration(days: 2, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '3',
    courtId: '3',
    clubId: '3',
    startTime: DateTime.now().add(const Duration(days: 2)),
    endTime: DateTime.now().add(const Duration(days: 2, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '1',
    courtId: '1',
    clubId: '1',
    startTime: DateTime.now().add(const Duration(days: 3)),
    endTime: DateTime.now().add(const Duration(days: 3, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '3',
    courtId: '3',
    clubId: '3',
    startTime: DateTime.now().add(const Duration(days: 3)),
    endTime: DateTime.now().add(const Duration(days: 3, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '1',
    courtId: '1',
    clubId: '1',
    startTime: DateTime.now().add(const Duration(days: 3)),
    endTime: DateTime.now().add(const Duration(days: 3, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '2',
    courtId: '2',
    clubId: '2',
    startTime: DateTime.now().add(const Duration(days: 3)),
    endTime: DateTime.now().add(const Duration(days: 3, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '1',
    courtId: '1',
    clubId: '1',
    startTime: DateTime.now().add(const Duration(days: 3)),
    endTime: DateTime.now().add(const Duration(days: 3, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '2',
    courtId: '2',
    clubId: '2',
    startTime: DateTime.now().add(const Duration(days: 3)),
    endTime: DateTime.now().add(const Duration(days: 3, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '1',
    courtId: '1',
    clubId: '1',
    startTime: DateTime.now().add(const Duration(days: 3)),
    endTime: DateTime.now().add(const Duration(days: 3, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '2',
    courtId: '2',
    clubId: '2',
    startTime: DateTime.now().add(const Duration(days: 3)),
    endTime: DateTime.now().add(const Duration(days: 3, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
  Reservation(
    id: '1',
    courtId: '1',
    clubId: '1',
    startTime: DateTime.now().add(const Duration(days: 3)),
    endTime: DateTime.now().add(const Duration(days: 3, hours: 1)),
    status: ReservationStatus.pending,
    coachId: '1',
    title: 'Tennis Lesson',
  ),
];

class ReservationRepository {
  Future<Reservation> getReservation(String id) async {
    return Future.delayed(
      const Duration(seconds: 1),
      () => reservations.firstWhere((reservation) => reservation.id == id),
    );
  }

  Future<List<Reservation>> getReservations() async {
    return Future.delayed(
      const Duration(seconds: 1),
      () => reservations,
    );
  }
}
